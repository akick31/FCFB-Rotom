name: Build and Tag

on:
  push:
    branches:
      - main

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      # Step 3: Get the latest tag
      - name: Get latest tag
        id: get_latest_tag
        run: |
          git fetch --tags  # Ensure all tags are fetched
          TAG=$(git describe --tags $(git rev-list --tags --max-count=1) 2>/dev/null || echo "1.0.0")
          echo "Latest tag: ${TAG}"
          echo "::set-output name=latest_tag::${TAG}"

      # Step 4: Calculate next version
      - name: Calculate next version
        id: calculate_version
        run: |
          LATEST_TAG=${{ steps.get_latest_tag.outputs.latest_tag }}
          echo "Latest tag: ${LATEST_TAG}"
          
          # Split the tag into major, minor, and patch
          VERSION_REGEX="^([0-9]+)\.([0-9]+)\.([0-9]+)$"
          if [[ $LATEST_TAG =~ $VERSION_REGEX ]]; then
            MAJOR="${BASH_REMATCH[1]}"
            MINOR="${BASH_REMATCH[2]}"
            PATCH="${BASH_REMATCH[3]}"
          else
            echo "No valid version found, starting with 1.0.0"
            MAJOR=1
            MINOR=0
            PATCH=0
          fi

          # Determine version increment based on commit messages
          if git log -1 --pretty=%B | grep -q "MAJOR:"; then
            NEW_MAJOR=$((MAJOR + 1))
            NEW_MINOR=0
            NEW_PATCH=0
          elif git log -1 --pretty=%B | grep -q "MINOR:"; then
            NEW_MAJOR=$MAJOR
            NEW_MINOR=$((MINOR + 1))
            NEW_PATCH=0
          else
            # Increment the patch version by default
            NEW_MAJOR=$MAJOR
            NEW_MINOR=$MINOR
            NEW_PATCH=$((PATCH + 1))
          fi
          
          NEW_TAG="${NEW_MAJOR}.${NEW_MINOR}.${NEW_PATCH}"
          echo "New tag will be: ${NEW_TAG}"
          
          echo "::set-output name=new_tag::${NEW_TAG}"

      # Step 5: Create a new tag
      - name: Create tag
        run: |
          NEW_TAG=${{ steps.calculate_version.outputs.new_tag }}
          git tag $NEW_TAG
          git push origin $NEW_TAG
